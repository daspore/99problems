{
    "1": {
        "description": "Find the last element of a list.",
        "difficulty": 1,
        "function-name": "last",
	"category": "Lists",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_n)\\mapsto x_n \\)",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "10"},
				{"input": "FN \"abc\"", "output": "c"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 4"},
				{"input": "FN([a,b,c],X).", "output": "X = c"},
			]
		}
	}
    },
    "2": {
        "description": "Find the next-to-the-last element of a list.",
        "difficulty": 1,
        "function-name": "penultimate",
	"category": "Lists",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto x_{n-1} \\)",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "9"},
				{"input": "FN \"abc\"", "output": "b"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 3"},
				{"input": "FN([a,b,c],X).", "output": "X = b"},
			]
		}
	}
    },
    "3": {
        "description": "Find the \\(k\\)th element of a list. The first element in the list is number 0.\n",
        "difficulty": 1,
        "function-name": "element at index",
	"abstract-example": "\\( k, (x_0,x_1,\\ldots,x_n)\\mapsto x_{k} \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN 0 [1..10]", "output": "1"},
				{"input": "FN 2 \"abc\"", "output": "c"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN(0,[1,2,3,4],X).", "output": "X = 1"},
				{"input": "FN(2,[a,b,c],X).", "output": "X = c"},
			]
		}
	}
    },
    "4": {
        "description": "Find the number of elements of a list.\n",
        "difficulty": 1,
        "function-name": "length",
        "example": "",
	"abstract-example": "\\( (x_1,\\ldots,x_n)\\mapsto n \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "10"},
				{"input": "FN \"abc\"", "output": "3"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 4"},
				{"input": "FN([a,b,c],X).", "output": "X = 3"},
			]
		}
	}
    },
    "5": {
        "description": "Reverse a list.\n",
        "difficulty": 1,
        "function-name": "reverse",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto  (x_n,x_{n-1},\\ldots,x_{2},x_1)\\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..5]", "output": "[5,4,3,2,1]"},
				{"input": "FN \"abc!\"", "output": "\"!cba\""}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [4,3,2,1]"},
				{"input": "FN([a,b,c],X).", "output": "X = [c,b,a]"},
			]
		}
	}
    },
    "6": {
        "description": "Find out whether a list is a palindrome. A palindrome can be read forward or backward. For example \"xamax\".",
        "difficulty": 1,
        "function-name": "palindromic",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto \\mathbf{true} \\) if \\(x_i=x_{n-1}\\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..5]", "output": "false"},
				{"input": "FN \"abcba\"", "output": "true"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4]).", "output": "no"},
				{"input": "FN([a,b,c,b,a]).", "output": "yes"},
			]
		}
	}
    },
    "7": {
        "description": "Flatten a nested list structure.\n",
        "difficulty": 2,
        "function-name": "flatten",
	"abstract-example": "\\( \\big(x_1,(x_2,x_3),((x_4,\\ldots\\big)\\mapsto (x_1,x_2,x_3,x_4,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"hints": [
				{"Haskell's type system requires lists to ibe homogeneous (they must have the exact same type). So you cannot define arbitrarily nested lists. For this problem, you will need to define a data type that simulates nested lists. Use:\ndata NestedList a = Elem a | List [NestedList a]"
			],
			"examples": [
				{"input": "FN (Elem 1)", "output": "[1]"},
				{"input": "FN (List [Elem 1, List [List [], Elem 2, List [Elem 3]], Elem 4])", "output": "[1,2,3,4]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN(1,X).", "output": "X = [1]"},
				{"input": "FN([1,[[],2,[3]],4],X).", "output": "X = [1,2,3,4]"},
			]
		}
	}
    },
    "8": {
        "description": "Eliminate consecutive duplicates of list elements.\n",
        "difficulty": 2,
        "function-name": "deduplicate",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto (a,b,a,c,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..4]", "output": "[1,2,3,4]"},
				{"input": "FN \"aaabaaccccb\"", "output": "\"abacb\""}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [1,2,3,4]"},
				{"input": "FN([a,a,a,b,a,a,c,c,c,c,b],X).", "output": "X = [a,b,a,c,b]"},
			]
		}
	}
    },
    "9": {
        "description": "Pack consecutive duplicates of list elements into sublists.\nIf a list contains repeated elements they should be placed in separate sublists.\n",
        "difficulty": 2,
        "function-name": "pack duplicates",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,a,a),(b),(a,a),(c,c,c),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..4]", "output": "[[1],[2],[3],[4]]"},
				{"input": "FN \"aaabaaccccb\"", "output": "[\"aaa\",\"b\",\"aa\",\"cccc\",\"b\"]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [[1],[2],[3],[4]]"},
				{"input": "FN([a,a,a,b,a,a,c,c,c,c,b],X).", "output": "X = [[a,a,a],[b],[a,a],[c,c,c,c],[b]]"},
			]
		}
	}
    },
    "10": {
        "description": "Runlength encoding of a list.\nUse the result of earlier problems to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists \\((e,n)\\) where \\(e\\) is the value of the element and \\(n\\) is the number of duplicates.\n",
        "difficulty": 1,
        "function-name": "runlength encode",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,3),(b,1),(a,2),(c,3),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..4]", "output": "[(1,1),(1,2),(1,3),(1,4)]"},
				{"input": "FN \"aaabaaccccb\"", "output": "[(3,'a'),(1,'b'),(2,'a'),(4,'c'),(1,'b')]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [[1,1],[1,2],[1,3],[1,4]]"},
				{"input": "FN([a,a,a,b,a,a,c,c,c,c,b],X).", "output": "X = [[3,a],[1,b],[2,a],[4,c],[1,b]]"},
			]
		}
	}
    },
    "11": {
        "description": "Modified run-length encoding.\nModify the result of problem 10 in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as \\((e,n)\\) lists.",
        "difficulty": 1,
        "function-name": "runlength encode b",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,3),b,(a,2),(c,3),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..4]", "output": "[(Single 1),(Single 2),(Single 3),(Single 4)]"},
				{"input": "FN \"aaabaaccccb\"", "output": "[(Multiple 3 'a'),(Single 'b'),(Multiple 2 'a'),(Multiple 4 'c'),(Single 'b')]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [1,2,3,4]"},
				{"input": "FN([a,a,a,b,a,a,c,c,c,c,b],X).", "output": "X = [[3,a],b,[2,a],[4,c],b]"},
			]
		}
	}
    },
    "12": {
        "description": "Decode a run-length encoded list.\n",
        "difficulty": 2,
        "function-name": "runlength decode",
	"abstract-example": "\\( \\big((a,3),b,(a,2),(c,3),\\ldots\\big) \\mapsto (a,a,a,b,a,a,c,c,c,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "13": {
        "description": "(**) Run-length encoding of a list (direct solution). \n",
        "difficulty": 2,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "14": {
        "description": "Double each element of a list.\n",
        "difficulty": 1,
        "function-name": "double",
	"abstract-example": "\\( (x_1,x_2,x_3,\\ldots)\\mapsto (x_1,x_2,x_2,x_2,x_3,x_3,\\ldots) \\)",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "15": {
        "description": "Repeat each element of a list a given number of times.\n",
        "difficulty": 2,
        "function-name": "repeat",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots)\\mapsto (\\underbrace{x_1,\\ldots,x_1}_{k},\\underbrace{x_2,\\ldots,x_2}_{k},\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "16": {
        "description": "Drop every \\(k\\)th element from a list.\n",
        "difficulty": 2,
        "function-name": "drop sequence",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots)\\mapsto (x_1,x_2,\\ldots,x_{k-1},x_{k+1},\\ldots,x_{2k-1},x_{2k+1},\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "17": {
        "description": "When given a length, split a list into two parts with the first part being of the specified length.\n",
        "difficulty": 1,
        "function-name": "split",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots,x_n)\\mapsto (x_1,x_2,\\ldots,x_{k}),(x_{k+1},\\ldots,x_{n}) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "18": {
        "description": "Extract a slice from a list. Given numbers \\(i\\) and \\(j\\), return a sublist consisting of elements whose indices are between \\(i\\) and \\(j\\).",
        "difficulty": 2,
        "function-name": "slice",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "19": {
        "description": "Rotate a list \\(n\\) places to the left.\n",
        "difficulty": 2,
        "function-name": "roll",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "20": {
        "description": "Remove the K'th element from a list and return that element and the list with that element removed.\n",
        "difficulty": 1,
        "function-name": "pluck",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "21": {
        "description": "Insert an element at a given position into a list.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "22": {
        "description": "Create a list containing all integers within a given range.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "23": {
        "description": "Extract a given number of randomly selected elements from a list. \n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "24": {
        "description": "Lotto: Draw N different random numbers from the set 1..M.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "25": {
        "description": "Generate a random permutation of the elements of a list.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "26": {
        "description": "(**) Generate the combinations of K distinct objects chosen from the N elements of a list\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "27": {
        "description": "Group the elements of a set into disjoint subsets.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "28": {
        "description": "Sorting a list of lists according to length of sublists\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "31": {
        "description": "(**) Determine whether a given integer number is prime.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "32": {
        "description": "(**) Determine the greatest common divisor of two positive integer numbers. Use <a rel=\"nofollow\" class=\"external text\" href=\"http://en.wikipedia.org/wiki/Euclidean_algorithm\">Euclid's algorithm</a>.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "33": {
        "description": "(*) Determine whether two positive integer numbers are coprime. Two numbers are coprime if their greatest common divisor equals 1.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
        "language-overrides": {}
    },
    "34": {
        "description": "(**) Calculate Euler's totient function phi(m).\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "35": {
        "description": "(**) Determine the prime factors of a given positive integer. Construct a flat list containing the prime factors in ascending order.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "36": {
        "description": "(**) Determine the prime factors of a given positive integer.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "37": {
        "description": "(**) Calculate Euler's totient function phi(m) (improved).\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "38": {
        "description": "(*) Compare the two methods of calculating Euler's totient function.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "39": {
        "description": "(*) A list of prime numbers.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "40": {
        "description": "(**) Goldbach's conjecture.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "41": {
        "description": "(**) Given a range of integers by its lower and upper limit, print a list of all even numbers and their Goldbach composition.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "46": {
        "description": "(**) Define predicates and/2, or/2, nand/2, nor/2, xor/2, impl/2 and equ/2 (for logical equivalence) which succeed or fail according to the result of their respective operations; e.g. and(A,B) will succeed, if and only if both A and B succeed.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "47": {
        "description": "(*) Truth tables for logical expressions (2).\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "48": {
        "description": "(**) Truth tables for logical expressions (3).\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "49": {
        "description": "(**) Gray codes.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "50": {
        "description": "(***) Huffman codes.\n",
        "difficulty": null,
        "function-name": "",
        "example": "",
	"category": "Arithmetic",
        "language-overrides": {}
    }
}
