{
    "1": {
        "description": "Find the last element of a list.",
        "difficulty": 1,
        "function-name": "last",
	"category": "Lists",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_n)\\mapsto x_n \\)",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "10"},
				{"input": "FN \"abc\"", "output": "'c'"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 4"},
				{"input": "FN([a,b,c],X).", "output": "X = c"}
			]
		}
	}
    },
    "2": {
        "description": "Find the next-to-the-last element of a list.",
        "difficulty": 1,
        "function-name": "penultimate",
	"category": "Lists",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto x_{n-1} \\)",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "9"},
				{"input": "FN \"abc\"", "output": "'b'"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 3"},
				{"input": "FN([a,b,c],X).", "output": "X = b"}
			]
		}
	}
    },
    "3": {
        "description": "Find the \\(k\\)th element of a list. The first element in the list is number 0.\n",
        "difficulty": 1,
        "function-name": "element at index",
	"abstract-example": "\\( k, (x_0,x_1,\\ldots,x_n)\\mapsto x_{k} \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN 2 [0..10]", "output": "2"},
				{"input": "FN 1 \"abc\"", "output": "'b'"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN(2,[0,1,2,3,4],X).", "output": "X = 2"},
				{"input": "FN(1,[a,b,c],X).", "output": "X = b"}
			]
		}
	}
    },
    "4": {
        "description": "Find the number of elements of a list.\n",
        "difficulty": 1,
        "function-name": "length",
        "example": "",
	"abstract-example": "\\( (x_1,\\ldots,x_n)\\mapsto n \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "10"},
				{"input": "FN \"abc\"", "output": "3"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = 4"},
				{"input": "FN([a,b,c],X).", "output": "X = 3"}
			]
		}
	}
    },
    "5": {
        "description": "Reverse a list.\n",
        "difficulty": 1,
        "function-name": "reverse",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto  (x_n,x_{n-1},\\ldots,x_{2},x_1)\\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..10]", "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"},
				{"input": "FN \"abc\"", "output": "\"cba\""}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [4,3,2,1]"},
				{"input": "FN([a,b,c],X).", "output": "X = [c,b,a]"}
			]
		}
	}
    },
    "6": {
        "description": "Find out whether a list is a palindrome. A palindrome can be read forward or backward. For example \"xamax\".",
        "difficulty": 1,
        "function-name": "palindromic",
	"abstract-example": "\\( (x_1,x_2,\\ldots,x_{n-1},x_n)\\mapsto \\mathbf{True} \\) if \\(x_i=x_{n-1}\\) and \\(\\mathbf{False}\\) otherwise.",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN \"abc\"", "output": "False"},
				{"input": "FN \"abcba\"", "output": "True"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4]).", "output": "no"},
				{"input": "FN([a,b,c,b,a]).", "output": "yes"}
			]
		}
	}
    },
    "7": {
        "description": "Flatten a nested list structure.\n",
        "difficulty": 2,
        "function-name": "flatten",
	"abstract-example": "\\( \\big(x_1,(x_2,x_3),((x_4,\\ldots\\big)\\mapsto (x_1,x_2,x_3,x_4,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"hints": [
				{"hint": "Haskell's type system requires lists to be homogeneous (they must have the exact same type). So you cannot define arbitrarily nested lists. For this problem, you will need to define a data type that simulates nested lists. Use:\ndata NestedList a = Elem a | List [NestedList a]"}
			],
			"examples": [
				{"input": "FN (Elem 1)", "output": "[1]"},
				{"input": "FN (List [Elem 1, List [List [], Elem 2, List [Elem 3]], Elem 4])", "output": "[1,2,3,4]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN(1,X).", "output": "X = [1]"},
				{"input": "FN([1,[[],2,[3]],4],X).", "output": "X = [1,2,3,4]"}
			]
		}
	}
    },
    "8": {
        "description": "Eliminate consecutive duplicates of list elements.\n",
        "difficulty": 2,
        "function-name": "deduplicate",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto (a,b,a,c,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN \"aaaabccaadeeee\"", "output": "\"abcade\""}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([1,2,3,4],X).", "output": "X = [1,2,3,4]"},
				{"input": "FN([a,a,a,b,a,a,c,c,c,c,b],X).", "output": "X = [a,b,a,c,b]"}
			]
		}
	}
    },
    "9": {
        "description": "Pack consecutive duplicates of list elements into sublists.\nIf a list contains repeated elements they should be placed in separate sublists.\n",
        "difficulty": 2,
        "function-name": "pack duplicates",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,a,a),(b),(a,a),(c,c,c),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN \"aaaabccaadeeee\"", "output": "[\"aaaa\",\"b\",\"cc\",\"aa\",\"d\",\"eeee\"]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).", "output": "X = [[a,a,a],[b],[c,c],[a,a],[d],[e,e,e,e]]"}
			]
		}
	}
    },
    "10": {
        "description": "Runlength encoding of a list.\nUse the result of earlier problems to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists \\((e,n)\\) where \\(e\\) is the value of the element and \\(n\\) is the number of duplicates.\n",
        "difficulty": 1,
        "function-name": "runlength encode",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,3),(b,1),(a,2),(c,3),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN \"aaaabccaadeeee\"", "output": "[('a',3),('b',1),('c',2),('a',2),('d',1),('e',4)]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).", "output": "X = [[a,3],[b,1],[c,2],[a,2],[d,1],[e,4]]"}
			]
		}
	}
    },
    "11": {
        "description": "Modified run-length encoding.\nModify the result of problem 10 in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as \\((e,n)\\) lists.",
        "difficulty": 1,
        "function-name": "runlength encode b",
	"abstract-example": "\\( (a,a,a,b,a,a,c,c,c,\\ldots)\\mapsto \\big((a,3),b,(a,2),(c,3),\\ldots\\big) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN \"aaaabccaadeeee\"", "output": "[(Multiple 'a' 3),(Single 'b'),(Multiple 'c' 2),(Multiple 'a' 2),(Single 'd'),(Multiple 'e' 4)]"}
			]
		},
		"prolog": {
			"examples": [
				{"input": "FN([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).", "output": "X = [[a,3],b,[c,2],[a,2],d,[e,4]]"}
			]
		}
	}
    },
    "12": {
        "description": "Decode a run-length encoded list.\n",
        "difficulty": 2,
        "function-name": "runlength decode",
	"abstract-example": "\\( \\big((a,3),b,(a,2),(c,3),\\ldots\\big) \\mapsto (a,a,a,b,a,a,c,c,c,\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "13": {
        "description": "(**) Run-length encoding of a list (direct solution). \n",
        "difficulty": 2,
        "function-name": "",
        "example": "",
	"category": "Lists",
        "language-overrides": {}
    },
    "14": {
        "description": "Double each element of a list.\n",
        "difficulty": 1,
        "function-name": "double",
	"abstract-example": "\\( (x_1,x_2,x_3,\\ldots)\\mapsto (x_1,x_2,x_2,x_2,x_3,x_3,\\ldots) \\)",
        "example": "",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN [1..4]", "output": "[1,1,2,2,3,3,4,4]"}
			]
		}
	}
    },
    "15": {
        "description": "Repeat each element of a list a given number of times.\n",
        "difficulty": 2,
        "function-name": "repeat",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots)\\mapsto (\\underbrace{x_1,\\ldots,x_1}_{k},\\underbrace{x_2,\\ldots,x_2}_{k},\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN 3 [1..4]", "output": "[1,1,1,2,2,2,3,3,3,4,4,4]"}
			]
		}
	}
    },
    "16": {
        "description": "Drop every \\(k\\)th element from a list.\n",
        "difficulty": 2,
        "function-name": "drop sequence",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots)\\mapsto (x_1,x_2,\\ldots,x_{k-1},x_{k+1},\\ldots,x_{2k-1},x_{2k+1},\\ldots) \\)",
	"category": "Lists",
        "language-overrides": {
		"haskell": {
			"examples": [
				{"input": "FN 3 [1..10]", "output": "[1,2,4,5,7,8,10]"}
			]
		}
	}
    },
    "17": {
        "description": "When given a length, split a list into two parts with the first part being of the specified length.\n",
        "difficulty": 1,
        "function-name": "split",
	"abstract-example": "\\( k,(x_1,x_2,\\ldots,x_n)\\mapsto (x_1,x_2,\\ldots,x_{k}),(x_{k+1},\\ldots,x_{n}) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "18": {
        "description": "Extract a slice from a list. Given numbers \\(i\\) and \\(j\\), return a sublist consisting of elements whose indices are between \\(i\\) and \\(j\\).",
        "difficulty": 2,
        "function-name": "slice",
        "abstract-example": "\\( i, j, (x_1,x_2,\\ldots,x_n)\\mapsto (x_i,x_{i+1},\\ldots,x_{j}) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "19": {
        "description": "Rotate a list \\(k\\) places to the left.\n",
        "difficulty": 2,
        "function-name": "roll",
        "abstract-example": "\\( k, (x_0,x_2,\\ldots,x_n)\\mapsto (x_k,x_{k+1},\\ldots,x_{n}, x_0,x_1,\\ldots,x_{k-1}) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "20": {
        "description": "Remove the \\(k\\)th element from a list and return that element and the list with that element removed.\n",
        "difficulty": 1,
        "function-name": "pluck",
        "abstract-example": "\\( k, (x_0,x_2,\\ldots,x_n)\\mapsto x_k, (x_0,\\ldots,x_{k-1},x_{k+1},\\ldots,x_n) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "21": {
        "description": "Insert an element at a given position into a list.\n",
        "difficulty": 1,
        "function-name": "insert",
        "abstract-example": "\\( k,e, (x_0,x_2,\\ldots,x_n)\\mapsto x_k, (x_0,\\ldots,x_{k-1},e,x_{k},x_{k+1},\\ldots,x_n) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "22": {
        "description": "Create a list containing all integers within a given range.\n",
        "difficulty": 1,
        "function-name": "range",
        "abstract-example": "\\( i, j\\mapsto (i, i+1, \\ldots, j-1, j) \\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "23": {
        "description": "Extract a given number of randomly selected elements from a list. \n",
        "difficulty": 2,
        "function-name": "take random",
        "abstract-example": "\\( i, (x_1,\\ldots,x_n)\\mapsto (x_{a_1}, x_{a_2}, \\ldots, x_{a_i}) \\) where \\((a_k)_{k=1,\\ldots, i}\\) is a random sequence with no repetitions.",
	"category": "Lists",
        "language-overrides": {}
    },
    "24": {
        "description": "Lotto: Draw \\(k\\) different random numbers from the set \\(1,2,\\ldots, n\\).\n",
        "difficulty": 1,
        "function-name": "lotto",
	"abstract-example": "\\( i,n \\mapsto ({a_1}, {a_2}, \\ldots, {a_i}) \\) where \\((a_k)_{k=1,\\ldots, i}\\) is a random sequence of integers with no repetitions satisfying \\(1\\leq a_k\\leq n\\).",
	"category": "Lists",
        "language-overrides": {}
    },
    "25": {
        "description": "Generate a random permutation of the elements of a list.\n",
        "difficulty": 1,
        "function-name": "permute",
        "abstract-example": "\\( (x_1,\\ldots,x_n)\\mapsto (x_{a_1}, x_{a_2}, \\ldots, x_{a_n}) \\) where \\((a_k)_{k=1,\\ldots, n}\\) is a random permutation of \\(1,2,\\ldots,n\\).",
	"category": "Lists",
        "language-overrides": {}
    },
    "26": {
        "description": "Generate all combinations of \\(k\\) elements from a list.  For example, you might want to find all possible committees of size 3 from a list of names of size 12.  There would be 220 such possibilities since the order of the comittee doesn't matter for combinations.  You can read more about combinations at <a href='https://en.wikipedia.org/wiki/Combination'>Wikipedia: Combinations</a>.",
        "difficulty": 2,
        "abstract-example": "\\( k, (x_1,\\ldots,x_n)\\mapsto \\big((x_1,\\ldots,x_k), (x_1,x_3,\\ldots,x_{k+1}),(x_1,x_2,x_4,\\ldots,x_{k+1}),\\ldots  \\big)\\)",
        "function-name": "combinations",
	"category": "Lists",
        "language-overrides": {}
    },
    "27a": {
        "description": "List every way that a set of size 9 can be split into disjoint groups of sizes 2,3, and 4.",
        "difficulty": 2,
        "function-name": "group234",
        "abstract-example": "\\( (x_1,\\ldots,x_9)\\mapsto \\big([(x_1,x_2),(x_3,x_4,x_5),(x_6,\\ldots,x_9)], [(x_1,x_3),(x_2,x_4,x_5),(x_6,\\ldots,x_9)], \\ldots \\big)\\)",
	"category": "Lists",
        "language-overrides": {}
    },
    "27b": {
        "description": "Given a list of sizes \\((a,b,c,\\ldots)\\), list every way that a set of size \\(k\\) can be split into disjoint groups of sizes \\(a,b,c,\\ldots\\).",
        "difficulty": 2,
        "function-name": "group",
	"category": "Lists",
        "language-overrides": {}
    },
    "28a": {
        "description": "Sort a list of lists according to length of sublists.\n",
        "difficulty": 2,
        "function-name": "sort by length",
        "abstract-example": "\\( (L_1,\\ldots,L_n)\\mapsto (L_{a_1},\\ldots,L_{a_n})\\) satisfying \\(|L_{a_i}|\\leq |L_{a_j}|\\) whenever \\(i\\leq j\\).",
	"category": "Lists",
        "language-overrides": {}
    },
    "28b": {
        "description": "Sort a list of lists according the frequency with which the length of the list appears.\n",
        "difficulty": 2,
        "function-name": "sort by length frequency",
        "abstract-example": "\\( (L_1,\\ldots,L_n)\\mapsto (L_{a_1},\\ldots,L_{a_n})\\) satisfying \\(\\#\\{k:|L_{k}|=|L_{a_i}|\\}\\leq \\#\\{k:|L_{k}|=|L_{a_j}|\\}\\) whenever \\(i\\leq j\\).",
	"category": "Lists",
        "language-overrides": {}
    },
    "31": {
        "description": "Determine whether a given positive integer number is prime.\n",
        "difficulty": 2,
        "function-name": "prime",
        "abstract-example": "\\( n\\mapsto \\mathbf{True}\\) if \\(n\\) is prime and \\(\\mathbf{False}\\) otherwise.",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "32": {
        "description": "Determine the greatest common divisor of two integers. Use <a href='http://en.wikipedia.org/wiki/Euclidean_algorithm'>Euclid's algorithm</a>.\n",
        "difficulty": 2,
        "function-name": "gcd",
        "abstract-example": "\\( a,b\\mapsto k\\) satisfying \\(k\\geq 0\\) and for any \\(d\\) so that \\(d| a\\) and \\(d| b\\) then \\(d| k\\).",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "33": {
        "description": "Determine whether two positive integer numbers are coprime. Two numbers are coprime if their greatest common divisor equals 1.\n",
        "difficulty": 1,
        "function-name": "coprime",
        "abstract-example": "\\( a,b\\mapsto \\mathbf{True}\\) if \\(\\mathrm{gcd}(a,b)=1\\) and \\(\\mathbf{False}\\) otherwise.",
        "language-overrides": {}
    },
    "34": {
        "description": "Calculate Euler's totient function \\(\\phi(n)\\).  That is, the number of integers in the range \\(1,2,\\ldots,n\\) that are relatively prime to \\(n\\).",
        "difficulty": 2,
        "function-name": "totient",
        "abstract-example": "\\( \\displaystyle n\\mapsto \\sum_{\\substack{1\\leq i\\leq n\\\\\\mathrm{gcd}(i,n)=1}} 1\\)",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "35": {
        "description": "List the prime factors of a given positive integer in ascending order, repeating factors if they occur multiple times.",
        "difficulty": 2,
        "function-name": "factor",
        "abstract-example": "\\( n\\mapsto (p_1,p_2,\\ldots,p_k)\\) satisfying that \\(p_i\\) is prime for all \\(i\\), \\(p_i\\leq p_j\\) if \\(i\\leq j\\), and \\(\\displaystyle n=p_1p_2\\cdots p_k\\).",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "36": {
        "description": "List the prime factors of a given number and their multiplicity.",
        "difficulty": 2,
        "function-name": "factors",
        "abstract-example": "\\( n\\mapsto \\big((p_1,a_1),(p_2,a_2),\\ldots,(p_k,a_k)\\big)\\) satisfying that \\(p_i\\) is prime for all \\(i\\), \\(p_i\\leq p_j\\) if \\(i\\leq j\\), and \\(n=p_1^{a_1}p_2^{a_2}\\cdots p_k^{a_k}\\).",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "37": {
        "description": "Calculate Euler's totient function \\(\\phi(n)\\) using the efficient formula \\[\\phi(n)=(p_1-1)p_1^{a_1-1}(p_2-1)p_2^{a_2-1}\\cdots(p_k-1)p_k^{a_k-1}\\] where \\(n=p_1^{a_1}p_2^{a_2}\\cdots p_k^{a_k}\\) is the prime factorization of \\(n\\).",
        "difficulty": 2,
        "function-name": "efficient totient",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "38": {
        "description": "(*) Compare the two methods of calculating Euler's totient function.\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "39": {
        "description": "List all prime numbers in a given range.",
        "difficulty": 1,
        "function-name": "primes",
        "abstract-example": "\\( i,j\\mapsto (p_1,p_2,\\ldots, p_k)\\) where \\(i\\leq p_n\\leq j\\) exhaustively list the primes between \\(i\\) and \\(j\\).",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "40": {
        "description": "Goldbach's conjecture states that any <i>even</i> integer greater than 2 can be written as the sum of two primes.  For example, \\(28=5+23\\).  This conjecture has not been proved, but has been verified up to very large numbers.  Given a number, write it as the sum of two primes.",
        "difficulty": 2,
        "function-name": "goldbach",
        "abstract-example": "\\( 2n\\mapsto p_1,p_2\\) where \\(p_1,p_2\\) are prime and \\(2n=p_1+p_2\\).",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "41": {
        "description": "(**) Given a range of integers by its lower and upper limit, print a list of all even numbers and their Goldbach composition.\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "46": {
        "description": "(**) Define predicates and/2, or/2, nand/2, nor/2, xor/2, impl/2 and equ/2 (for logical equivalence) which succeed or fail according to the result of their respective operations; e.g. and(A,B) will succeed, if and only if both A and B succeed.\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "47": {
        "description": "(*) Truth tables for logical expressions (2).\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "48": {
        "description": "(**) Truth tables for logical expressions (3).\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "49": {
        "description": "(**) Gray codes.\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    },
    "50": {
        "description": "(***) Huffman codes.\n",
        "difficulty": null,
        "function-name": "",
	"category": "Arithmetic",
        "language-overrides": {}
    }
}
